/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.studentmanagementsystem;

import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Mega
 */
public class SearchAndUpdate extends javax.swing.JPanel {

    private final Color originalSelectionColor;
    private boolean isHighlighted = false;

    /**
     * Creates new form SearchAndUpdate
     */
    public SearchAndUpdate() {
        initComponents();
        originalSelectionColor = students.getSelectionBackground();
        ImageIcon searchIcon = new ImageIcon(
                getClass().getResource("/search.png") // ← note the leading "/"
        );
        ImageIcon SearchSmallIcon = IconUtils.resizeIcon(searchIcon, 24, 24);
        search.setIcon(SearchSmallIcon);

        ImageIcon updateIcon = new ImageIcon(
                getClass().getResource("/updated.png") // ← note the leading "/"
        );
        ImageIcon UpdateSmallIcon = IconUtils.resizeIcon(updateIcon, 24, 24);
        updateButton.setIcon(UpdateSmallIcon);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();

        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        // Apply to all columns
        for (int i = 0; i < students.getColumnCount(); i++) {
            students.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        // 1. Create a custom sorter
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(students.getModel());

        // 2. Configure it
        sorter.setSortable(0, true);   // ID
        sorter.setSortable(1, true);   // Name
        sorter.setSortable(2, false);  // Age
        sorter.setSortable(3, false);  // Gender
        sorter.setSortable(4, false);  // Department
        sorter.setSortable(5, true);  // GPA
        sorter.setSortable(6, false);  // update
        students.setRowSorter(sorter);

        this.updateForm.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        searchField = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        students = new javax.swing.JTable();
        updateForm = new javax.swing.JPanel();
        id = new javax.swing.JTextField();
        fullName = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        gender = new javax.swing.JComboBox<>();
        gpa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        department = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();

        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {10, 100, 10, 300, 10};
        layout.rowHeights = new int[] {80, 10, 100, 10};
        layout.columnWeights = new double[] {0.023, 0.23, 0.023, 0.697};
        layout.rowWeights = new double[] {0.0, 0.05, 0.5, 0.05};
        setLayout(layout);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(searchField, gridBagConstraints);

        search.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(search, gridBagConstraints);

        jScrollPane1.setBackground(new java.awt.Color(49, 51, 53));
        jScrollPane1.setForeground(new java.awt.Color(49, 51, 53));

        students.setBackground(new java.awt.Color(49, 51, 53));
        students.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        students.setForeground(new java.awt.Color(255, 255, 255));
        students.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(100), "Zeyad Hassan",  new Integer(20), "Male", "CCE",  new Float(3.7), "update"},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                { new Integer(101), "Mohamed Hassan",  new Integer(23), "Male", "CSE",  new Float(3.9), "update"}
            },
            new String [] {
                "ID", "Full Name", "Age", "Gender", "Department", "GPA", "Update"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        students.setAutoscrolls(false);
        students.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        students.setRowHeight(40);
        students.setSelectionBackground(new java.awt.Color(30, 30, 30));
        students.setShowGrid(true);
        students.getTableHeader().setReorderingAllowed(false);
        students.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(students);
        students.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jScrollPane1, gridBagConstraints);

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {50, 5, 100, 10, 50, 5, 100};
        jPanel1Layout.rowHeights = new int[] {50, 5, 50, 5, 50, 5, 50, 5};
        jPanel1Layout.columnWeights = new double[] {0.156, 0.0156, 0.3125, 0.03125, 0.156, 0.0156, 0.3125};
        jPanel1Layout.rowWeights = new double[] {0.3125, 0.03125, 0.3125, 0.03125, 0.3125};
        updateForm.setLayout(jPanel1Layout);

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(id, gridBagConstraints);

        fullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullNameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(fullName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(age, gridBagConstraints);

        gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "male", "female" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(gender, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(gpa, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Full name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("GPA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(jLabel5, gridBagConstraints);

        department.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(department, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(jLabel6, gridBagConstraints);

        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        updateButton.setText("UPDATE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        updateForm.add(updateButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(updateForm, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void fullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullNameActionPerformed

    private void studentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentsMouseClicked
        // TODO add your handling code here:
        int viewRow = students.rowAtPoint(evt.getPoint());
        int col = students.columnAtPoint(evt.getPoint());
        int modelRow = students.convertRowIndexToModel(viewRow);

        TableModel model = students.getModel();
        Integer id = (Integer) model.getValueAt(modelRow, 0);
        String fullName = model.getValueAt(modelRow, 1).toString();
        Integer age = (Integer) model.getValueAt(modelRow, 2);
        String gender = model.getValueAt(modelRow, 3).toString();
        String department = model.getValueAt(modelRow, 4).toString();
        Float gpa = (Float) model.getValueAt(modelRow, 5);

        update(id, fullName, age, gender, department, gpa);
    }//GEN-LAST:event_studentsMouseClicked

    private void departmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_departmentActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        String key = searchField.getText();
        searchAndHighlight(key);

    }//GEN-LAST:event_searchActionPerformed

    public void update(int id, String fullName, int age, String gender, String department, float gpa) {
        // 1. Fill the form fields
        this.id.setText(String.valueOf(id));
        this.fullName.setText(fullName);
        this.age.setText(String.valueOf(age));
        this.department.setText(department);
        this.gpa.setText(String.valueOf(gpa));
        this.gender.setSelectedItem(gender);
        updateForm.setVisible(true);

        // 3. Optional: Scroll to the form if your panel is tall
        revalidate();
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField age;
    private javax.swing.JTextField department;
    private javax.swing.JTextField fullName;
    private javax.swing.JComboBox<String> gender;
    private javax.swing.JTextField gpa;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable students;
    private javax.swing.JButton updateButton;
    private javax.swing.JPanel updateForm;
    // End of variables declaration//GEN-END:variables

    private void searchAndHighlight(String term) {
        if (term == null || term.trim().isEmpty()) {
            if (isHighlighted) {
                students.setSelectionBackground(originalSelectionColor);
                students.clearSelection();
                isHighlighted = false;
            }
            return;
        }

        TableModel model = students.getModel();
        for (int modelRow = 0; modelRow < model.getRowCount(); modelRow++) {
            Integer id = (Integer) model.getValueAt(modelRow, 0);
            String name = (String) model.getValueAt(modelRow, 1);

            if (term.equals(String.valueOf(id))
                    || (name != null && name.toLowerCase().equals(term.toLowerCase()))) {

                // highlight using cutom color
                students.setSelectionBackground(new Color(98, 151, 85));
                int viewRow = students.convertRowIndexToView(modelRow);
                students.setRowSelectionInterval(viewRow, viewRow);
                students.scrollRectToVisible(students.getCellRect(viewRow, 0, true));
                isHighlighted = true;
                return;
            }
        }

        JOptionPane.showMessageDialog(this, "Not found");
    }
}
